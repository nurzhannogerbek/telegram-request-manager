name: Deploy to AWS # Name of the workflow, visible in the GitHub Actions interface.

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the 'main' branch.
  workflow_dispatch: # Allow manual triggering of the workflow from the GitHub Actions interface.

env: # Environment variables shared across all jobs.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key ID stored in GitHub Secrets.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Access Key stored in GitHub Secrets.
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # Default AWS region for deployment.

jobs:
  deploy-test:
    name: Deploy to Test Environment # Job to deploy the test environment.
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub.

    steps:
      - name: Checkout code # Pull the repository code into the GitHub Actions runner.
        uses: actions/checkout@v3

      - name: Install dependencies # Install required system packages.
        run: |
          sudo apt-get update # Update the package list.
          sudo apt-get install -y zip # Install the zip utility to create deployment packages.

      - name: Create Lambda deployment package # Create a zip file containing the Lambda function's code.
        run: |
          cd lambdas/telegram_bot # Navigate to the Lambda function directory.
          zip -r ../../telegram_bot.zip . # Zip all files in the directory and place the archive in the project's root.

      - name: Setup Terraform # Set up the Terraform CLI for managing infrastructure.
        uses: hashicorp/setup-terraform@v2 # Use HashiCorp's official Terraform setup GitHub Action.
        with:
          terraform_version: 1.5.0 # Specify the Terraform version to install.

      - name: Terraform Init and Apply (Test) # Initialize and apply the Terraform configuration for the test environment.
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }} # Test Telegram bot token.
          ADMIN_CHAT_ID: ${{ secrets.TEST_ADMIN_CHAT_ID }} # Test admin chat ID.
          GOOGLE_SHEET_ID: ${{ secrets.TEST_GOOGLE_SHEET_ID }} # Test Google Sheet ID.
        working-directory: deployment/terraform # Set the working directory to the Terraform folder.
        run: |
          terraform init -backend-config="bucket=telegram-request-manager-test-terraform-state" \ # Configure S3 backend for state storage.
                         -backend-config="key=test/terraform.tfstate" \ # Define the state file path in S3.
                         -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \ # Set the AWS region for the backend.
                         -backend-config="encrypt=true" # Enable encryption for the state file.
          terraform apply \ # Apply the Terraform configuration to provision resources.
            -var-file=environments/test/terraform.tfvars \ # Use environment-specific variables for the test environment.
            -var="aws_region=${{ secrets.AWS_DEFAULT_REGION }}" \ # Pass the AWS region as a variable.
            -auto-approve # Automatically approve the changes without interactive confirmation.

  deploy-prod:
    name: Deploy to Production Environment # Job to deploy the production environment.
    needs: deploy-test # Ensure this job only runs after the test deployment succeeds.
    runs-on: ubuntu-latest # Use the latest Ubuntu runner.

    steps:
      - name: Checkout code # Pull the repository code into the GitHub Actions runner.
        uses: actions/checkout@v3

      - name: Install dependencies # Install required system packages.
        run: |
          sudo apt-get update # Update the package list.
          sudo apt-get install -y zip # Install the zip utility to create deployment packages.

      - name: Create Lambda deployment package # Create a zip file containing the Lambda function's code.
        run: |
          cd lambdas/telegram_bot # Navigate to the Lambda function directory.
          zip -r ../../telegram_bot.zip . # Zip all files in the directory and place the archive in the project's root.

      - name: Setup Terraform # Set up the Terraform CLI for managing infrastructure.
        uses: hashicorp/setup-terraform@v2 # Use HashiCorp's official Terraform setup GitHub Action.
        with:
          terraform_version: 1.5.0 # Specify the Terraform version to install.

      - name: Terraform Init and Apply (Prod) # Initialize and apply the Terraform configuration for the production environment.
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.PROD_TELEGRAM_BOT_TOKEN }} # Production Telegram bot token.
          ADMIN_CHAT_ID: ${{ secrets.PROD_ADMIN_CHAT_ID }} # Production admin chat ID.
          GOOGLE_SHEET_ID: ${{ secrets.PROD_GOOGLE_SHEET_ID }} # Production Google Sheet ID.
        working-directory: deployment/terraform # Set the working directory to the Terraform folder.
        run: |
          terraform init -backend-config="bucket=telegram-request-manager-prod-terraform-state" \ # Configure S3 backend for state storage.
                         -backend-config="key=prod/terraform.tfstate" \ # Define the state file path in S3.
                         -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \ # Set the AWS region for the backend.
                         -backend-config="encrypt=true" # Enable encryption for the state file.
          terraform apply \ # Apply the Terraform configuration to provision resources.
            -var-file=environments/prod/terraform.tfvars \ # Use environment-specific variables for the production environment.
            -var="aws_region=${{ secrets.AWS_DEFAULT_REGION }}" \ # Pass the AWS region as a variable.
            -auto-approve # Automatically approve the changes without interactive confirmation.
