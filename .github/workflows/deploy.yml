name: Deploy to AWS # The name of the GitHub Actions workflow, visible in the GitHub Actions interface.

on:
  push:
    branches:
      - main # This triggers the workflow whenever code is pushed to the 'main' branch.
  workflow_dispatch: # Allows manual execution of the workflow from the GitHub Actions interface.

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key, securely stored in GitHub Secrets.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Key, securely stored in GitHub Secrets.
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # AWS region where the infrastructure is deployed.

jobs:
  # Deploy to Test Environment.
  deploy-test:
    name: Deploy to Test Environment # Job name for deploying to the test environment.
    runs-on: ubuntu-latest # Use the latest Ubuntu virtual machine provided by GitHub Actions.

    steps:
      # Step 1: Check out the code.
      - name: Checkout code # A descriptive name for the step.
        uses: actions/checkout@v3 # Official GitHub Action to clone the repository into the runner.

      # Step 2: Setup Terraform.
      - name: Setup Terraform # Install and configure the Terraform CLI in the GitHub Actions environment.
        uses: hashicorp/setup-terraform@v2 # Official Terraform GitHub Action.
        with:
          terraform_version: 1.5.0 # Specify the version of Terraform to install and use.

      # Step 3: Prepare the Lambda function package.
      - name: Install dependencies and package Lambda function # This step creates the zip file for the Lambda function.
        working-directory: lambdas/telegram_bot # Navigate to the Lambda function directory.
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 4: Apply the Terraform configuration for the test environment.
      - name: Terraform Init and Apply (Test) # Initialize and apply the Terraform configuration for the test environment.
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }} # Test environment-specific token for the bot.
          ADMIN_CHAT_ID: ${{ secrets.TEST_ADMIN_CHAT_ID }} # Test admin chat ID to handle notifications.
          GOOGLE_SHEET_ID: ${{ secrets.TEST_GOOGLE_SHEET_ID }} # Test Google Sheet ID for storing responses.
        working-directory: deployment/terraform # Set the working directory to where Terraform files are located.
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-test-terraform-state" \
            -backend-config="key=test/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform apply \
            -var-file=environments/test/terraform.tfvars \
            -var="aws_region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -auto-approve

  # Deploy to Production Environment.
  deploy-prod:
    name: Deploy to Production Environment # Job name for deploying to the production environment.
    needs: deploy-test # Ensure this job runs only after the test deployment succeeds.
    runs-on: ubuntu-latest # Use the latest Ubuntu virtual machine provided by GitHub Actions.
    if: false # Temporarily disable the production deployment.

    steps:
      # Step 1: Check out the code.
      - name: Checkout code # A descriptive name for the step.
        uses: actions/checkout@v3 # Official GitHub Action to clone the repository into the runner.

      # Step 2: Setup Terraform.
      - name: Setup Terraform # Install and configure the Terraform CLI in the GitHub Actions environment.
        uses: hashicorp/setup-terraform@v2 # Official Terraform GitHub Action.
        with:
          terraform_version: 1.5.0 # Specify the version of Terraform to install and use.

      # Step 3: Prepare the Lambda function package.
      - name: Install dependencies and package Lambda function # This step creates the zip file for the Lambda function.
        working-directory: lambdas/telegram_bot # Navigate to the Lambda function directory.
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 4: Apply the Terraform configuration for the production environment.
      - name: Terraform Init and Apply (Prod) # Initialize and apply the Terraform configuration for the production environment.
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.PROD_TELEGRAM_BOT_TOKEN }} # Production environment-specific token for the bot.
          ADMIN_CHAT_ID: ${{ secrets.PROD_ADMIN_CHAT_ID }} # Production admin chat ID to handle notifications.
          GOOGLE_SHEET_ID: ${{ secrets.PROD_GOOGLE_SHEET_ID }} # Production Google Sheet ID for storing responses.
        working-directory: deployment/terraform # Set the working directory to where Terraform files are located.
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-prod-terraform-state" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform apply \
            -var-file=environments/prod/terraform.tfvars \
            -var="aws_region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -auto-approve
