name: Deploy to AWS # Workflow name displayed in GitHub Actions interface.

on:
  push:
    branches:
      - main # Trigger the workflow when a push is made to the 'main' branch.
  workflow_dispatch: # Allows manual execution of the workflow through the GitHub Actions interface.

# Set environment variables to access AWS securely using GitHub Secrets.
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key, securely stored in GitHub Secrets.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Key, securely stored in GitHub Secrets.
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # AWS region where infrastructure is deployed.

jobs:
  # Job for deploying to the test environment.
  deploy-test:
    name: Deploy to Test Environment # Job identifier for the test environment.
    runs-on: ubuntu-latest # The GitHub-hosted runner to execute the job on.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Terraform plugins and state lock files.
      - name: Cache Terraform plugins and lock files
        uses: actions/cache@v3
        with:
          path: |
            **/.terraform
            **/.terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      # Step 3: Install and configure Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Install dependencies and package the Lambda function.
      - name: Install dependencies and package Lambda function
        working-directory: lambdas/telegram_bot
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 5: Initialize Terraform backend and apply infrastructure changes.
      - name: Terraform Init and Apply (Test)
        working-directory: deployment/terraform
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-test-terraform-state" \
            -backend-config="key=test/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform plan -out=tfplan -var-file="environments/test/terraform.tfvars"
          terraform apply -auto-approve tfplan

  # Job for deploying to the production environment.
  deploy-prod:
    name: Deploy to Production Environment
    needs: deploy-test # Ensure that the test deployment is successful before running this job.
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Deploy to production only through manual trigger.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Terraform plugins and lock files.
      - name: Cache Terraform plugins and lock files
        uses: actions/cache@v3
        with:
          path: |
            **/.terraform
            **/.terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      # Step 3: Install and configure Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Install dependencies and package the Lambda function.
      - name: Install dependencies and package Lambda function
        working-directory: lambdas/telegram_bot
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 5: Initialize Terraform backend and apply infrastructure changes.
      - name: Terraform Init and Apply (Prod)
        working-directory: deployment/terraform
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-prod-terraform-state" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform plan -out=tfplan -var-file="environments/prod/terraform.tfvars"
          terraform apply -auto-approve tfplan
