name: Deploy to AWS # GitHub Actions workflow name, displayed in the interface.

on:
  push:
    branches:
      - main # Trigger this workflow when code is pushed to the main branch.
  workflow_dispatch: # Allow manual execution of the workflow through GitHub Actions.

# Define environment variables for AWS authentication using GitHub Secrets.
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  # Job to deploy to the test environment.
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest # Use the latest Ubuntu virtual machine provided by GitHub.

    steps:
      # Step 1: Checkout the repository.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install and configure Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Specify the Terraform version.

      # Step 3: Install dependencies and package the Lambda function.
      - name: Install dependencies and package Lambda function
        working-directory: lambdas/telegram_bot
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 4: Debug service_account_private_key before applying Terraform.
      - name: Debug service_account_private_key
        run: grep "service_account_private_key" deployment/terraform/environments/test/terraform.tfvars

      # Step 5: Initialize and apply Terraform configuration.
      - name: Terraform Init and Apply (Test)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          ADMIN_CHAT_ID: ${{ secrets.TEST_ADMIN_CHAT_ID }}
          GOOGLE_SHEET_ID: ${{ secrets.TEST_GOOGLE_SHEET_ID }}
          SERVICE_ACCOUNT_TYPE: ${{ secrets.TEST_SERVICE_ACCOUNT_TYPE }}
          SERVICE_ACCOUNT_PROJECT_ID: ${{ secrets.TEST_SERVICE_ACCOUNT_PROJECT_ID }}
          SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${{ secrets.TEST_SERVICE_ACCOUNT_PRIVATE_KEY_ID }}
          SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.TEST_SERVICE_ACCOUNT_PRIVATE_KEY }}
          SERVICE_ACCOUNT_CLIENT_EMAIL: ${{ secrets.TEST_SERVICE_ACCOUNT_CLIENT_EMAIL }}
          SERVICE_ACCOUNT_CLIENT_ID: ${{ secrets.TEST_SERVICE_ACCOUNT_CLIENT_ID }}
          SERVICE_ACCOUNT_AUTH_URI: ${{ secrets.TEST_SERVICE_ACCOUNT_AUTH_URI }}
          SERVICE_ACCOUNT_TOKEN_URI: ${{ secrets.TEST_SERVICE_ACCOUNT_TOKEN_URI }}
          SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL: ${{ secrets.TEST_SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL }}
          SERVICE_ACCOUNT_CLIENT_CERT_URL: ${{ secrets.TEST_SERVICE_ACCOUNT_CLIENT_CERT_URL }}
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-test-terraform-state" \
            -backend-config="key=test/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform apply \
            -var="telegram_bot_token=$TELEGRAM_BOT_TOKEN" \
            -var="admin_chat_id=$ADMIN_CHAT_ID" \
            -var="google_sheet_id=$GOOGLE_SHEET_ID" \
            -var="service_account_type=$SERVICE_ACCOUNT_TYPE" \
            -var="service_account_project_id=$SERVICE_ACCOUNT_PROJECT_ID" \
            -var="service_account_private_key_id=$SERVICE_ACCOUNT_PRIVATE_KEY_ID" \
            -var="service_account_private_key=$SERVICE_ACCOUNT_PRIVATE_KEY" \
            -var="service_account_client_email=$SERVICE_ACCOUNT_CLIENT_EMAIL" \
            -var="service_account_client_id=$SERVICE_ACCOUNT_CLIENT_ID" \
            -var="service_account_auth_uri=$SERVICE_ACCOUNT_AUTH_URI" \
            -var="service_account_token_uri=$SERVICE_ACCOUNT_TOKEN_URI" \
            -var="service_account_auth_provider_cert_url=$SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL" \
            -var="service_account_client_cert_url=$SERVICE_ACCOUNT_CLIENT_CERT_URL" \
            -var-file="environments/test/terraform.tfvars" \
            -auto-approve

  # Job to deploy to the production environment.
  deploy-prod:
    name: Deploy to Production Environment
    needs: deploy-test # Run this job only after the test deployment succeeds.
    runs-on: ubuntu-latest
    if: false # Temporarily disable the production deployment.

    steps:
      # Step 1: Checkout the repository.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install and configure Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Install dependencies and package the Lambda function.
      - name: Install dependencies and package Lambda function
        working-directory: lambdas/telegram_bot
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 4: Initialize and apply Terraform configuration for production.
      - name: Terraform Init and Apply (Prod)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}
          ADMIN_CHAT_ID: ${{ secrets.PROD_ADMIN_CHAT_ID }}
          GOOGLE_SHEET_ID: ${{ secrets.PROD_GOOGLE_SHEET_ID }}
          SERVICE_ACCOUNT_TYPE: ${{ secrets.PROD_SERVICE_ACCOUNT_TYPE }}
          SERVICE_ACCOUNT_PROJECT_ID: ${{ secrets.PROD_SERVICE_ACCOUNT_PROJECT_ID }}
          SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${{ secrets.PROD_SERVICE_ACCOUNT_PRIVATE_KEY_ID }}
          SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.PROD_SERVICE_ACCOUNT_PRIVATE_KEY }}
          SERVICE_ACCOUNT_CLIENT_EMAIL: ${{ secrets.PROD_SERVICE_ACCOUNT_CLIENT_EMAIL }}
          SERVICE_ACCOUNT_CLIENT_ID: ${{ secrets.PROD_SERVICE_ACCOUNT_CLIENT_ID }}
          SERVICE_ACCOUNT_AUTH_URI: ${{ secrets.PROD_SERVICE_ACCOUNT_AUTH_URI }}
          SERVICE_ACCOUNT_TOKEN_URI: ${{ secrets.PROD_SERVICE_ACCOUNT_TOKEN_URI }}
          SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL: ${{ secrets.PROD_SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL }}
          SERVICE_ACCOUNT_CLIENT_CERT_URL: ${{ secrets.PROD_SERVICE_ACCOUNT_CLIENT_CERT_URL }}
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-prod-terraform-state" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform apply \
            -var="telegram_bot_token=$TELEGRAM_BOT_TOKEN" \
            -var="admin_chat_id=$ADMIN_CHAT_ID" \
            -var="google_sheet_id=$GOOGLE_SHEET_ID" \
            -var="service_account_type=$SERVICE_ACCOUNT_TYPE" \
            -var="service_account_project_id=$SERVICE_ACCOUNT_PROJECT_ID" \
            -var="service_account_private_key_id=$SERVICE_ACCOUNT_PRIVATE_KEY_ID" \
            -var="service_account_private_key=$SERVICE_ACCOUNT_PRIVATE_KEY" \
            -var="service_account_client_email=$SERVICE_ACCOUNT_CLIENT_EMAIL" \
            -var="service_account_client_id=$SERVICE_ACCOUNT_CLIENT_ID" \
            -var="service_account_auth_uri=$SERVICE_ACCOUNT_AUTH_URI" \
            -var="service_account_token_uri=$SERVICE_ACCOUNT_TOKEN_URI" \
            -var="service_account_auth_provider_cert_url=$SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL" \
            -var="service_account_client_cert_url=$SERVICE_ACCOUNT_CLIENT_CERT_URL" \
            -var-file="environments/prod/terraform.tfvars" \
            -auto-approve
