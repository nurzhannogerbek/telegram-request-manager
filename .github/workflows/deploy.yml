name: Deploy to AWS # Workflow name displayed in GitHub Actions interface.

on:
  push:
    branches:
      - main # Trigger the workflow when a push is made to the 'main' branch.
  workflow_dispatch: # Allows manual execution of the workflow through the GitHub Actions interface.

# Set environment variables to access AWS securely using GitHub Secrets.
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key, securely stored in GitHub Secrets.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Key, securely stored in GitHub Secrets.
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # AWS region where infrastructure is deployed.

jobs:
  # Job for deploying to the test environment.
  deploy-test:
    name: Deploy to Test Environment # Job identifier for the test environment.
    runs-on: ubuntu-latest # The GitHub-hosted runner to execute the job on.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code # A meaningful description of the step.
        uses: actions/checkout@v3 # Official GitHub Action to clone the repository.

      # Step 2: Install and configure the Terraform CLI.
      - name: Setup Terraform # Setup the Terraform environment.
        uses: hashicorp/setup-terraform@v2 # Official GitHub Action for setting up Terraform.
        with:
          terraform_version: 1.5.0 # Specify the required Terraform version.

      # Step 3: Install dependencies and create a zip package for the Lambda function.
      - name: Install dependencies and package Lambda function # Package the Lambda function with its dependencies.
        working-directory: lambdas/telegram_bot
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 4: Initialize and apply the Terraform configuration for the test environment.
      - name: Terraform Init and Apply (Test) # Initialize and deploy resources for the test environment.
        working-directory: deployment/terraform
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-test-terraform-state" \
            -backend-config="key=test/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform apply -auto-approve \
            -var="telegram_bot_token=${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}" \
            -var="admin_chat_id=${{ secrets.TEST_ADMIN_CHAT_ID }}" \
            -var="google_sheet_id=${{ secrets.TEST_GOOGLE_SHEET_ID }}" \
            -var="service_account_type=${{ secrets.TEST_SERVICE_ACCOUNT_TYPE }}" \
            -var="service_account_project_id=${{ secrets.TEST_SERVICE_ACCOUNT_PROJECT_ID }}" \
            -var="service_account_private_key_id=${{ secrets.TEST_SERVICE_ACCOUNT_PRIVATE_KEY_ID }}" \
            -var="service_account_private_key=${{ secrets.TEST_SERVICE_ACCOUNT_PRIVATE_KEY }}" \
            -var="service_account_client_email=${{ secrets.TEST_SERVICE_ACCOUNT_CLIENT_EMAIL }}" \
            -var="service_account_client_id=${{ secrets.TEST_SERVICE_ACCOUNT_CLIENT_ID }}" \
            -var="service_account_auth_uri=${{ secrets.TEST_SERVICE_ACCOUNT_AUTH_URI }}" \
            -var="service_account_token_uri=${{ secrets.TEST_SERVICE_ACCOUNT_TOKEN_URI }}" \
            -var="service_account_auth_provider_cert_url=${{ secrets.TEST_SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL }}" \
            -var="service_account_client_cert_url=${{ secrets.TEST_SERVICE_ACCOUNT_CLIENT_CERT_URL }}" \
            -var-file="environments/test/terraform.tfvars"

  # Job for deploying to the production environment (disabled by default).
  deploy-prod:
    name: Deploy to Production Environment # Job identifier for the production environment.
    needs: deploy-test # Ensure that the test deployment is successful before running this job.
    runs-on: ubuntu-latest # The GitHub-hosted runner to execute the job.
    if: github.event_name == 'workflow_dispatch' # Deploy to production only through manual trigger.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code # A meaningful description of the step.
        uses: actions/checkout@v3 # Official GitHub Action to clone the repository.

      # Step 2: Install and configure the Terraform CLI.
      - name: Setup Terraform # Setup the Terraform environment.
        uses: hashicorp/setup-terraform@v2 # Official GitHub Action for setting up Terraform.
        with:
          terraform_version: 1.5.0 # Specify the required Terraform version.

      # Step 3: Install dependencies and create a zip package for the Lambda function.
      - name: Install dependencies and package Lambda function # Package the Lambda function with its dependencies.
        working-directory: lambdas/telegram_bot
        run: |
          rm -f ../../deployment/terraform/telegram_bot.zip
          pip install -r requirements.txt -t .
          cp -r ../../shared .
          zip -r ../../deployment/terraform/telegram_bot.zip .
          sha256sum ../../deployment/terraform/telegram_bot.zip > ../../deployment/terraform/telegram_bot.zip.sha256

      # Step 4: Initialize and apply the Terraform configuration for the production environment.
      - name: Terraform Init and Apply (Prod) # Initialize and deploy resources for the production environment.
        working-directory: deployment/terraform
        run: |
          terraform init \
            -backend-config="bucket=telegram-request-manager-prod-terraform-state" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="encrypt=true"
          terraform apply -auto-approve \
            -var="telegram_bot_token=${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" \
            -var="admin_chat_id=${{ secrets.PROD_ADMIN_CHAT_ID }}" \
            -var="google_sheet_id=${{ secrets.PROD_GOOGLE_SHEET_ID }}" \
            -var="service_account_type=${{ secrets.PROD_SERVICE_ACCOUNT_TYPE }}" \
            -var="service_account_project_id=${{ secrets.PROD_SERVICE_ACCOUNT_PROJECT_ID }}" \
            -var="service_account_private_key_id=${{ secrets.PROD_SERVICE_ACCOUNT_PRIVATE_KEY_ID }}" \
            -var="service_account_private_key=${{ secrets.PROD_SERVICE_ACCOUNT_PRIVATE_KEY }}" \
            -var="service_account_client_email=${{ secrets.PROD_SERVICE_ACCOUNT_CLIENT_EMAIL }}" \
            -var="service_account_client_id=${{ secrets.PROD_SERVICE_ACCOUNT_CLIENT_ID }}" \
            -var="service_account_auth_uri=${{ secrets.PROD_SERVICE_ACCOUNT_AUTH_URI }}" \
            -var="service_account_token_uri=${{ secrets.PROD_SERVICE_ACCOUNT_TOKEN_URI }}" \
            -var="service_account_auth_provider_cert_url=${{ secrets.PROD_SERVICE_ACCOUNT_AUTH_PROVIDER_CERT_URL }}" \
            -var="service_account_client_cert_url=${{ secrets.PROD_SERVICE_ACCOUNT_CLIENT_CERT_URL }}" \
            -var-file="environments/prod/terraform.tfvars"
